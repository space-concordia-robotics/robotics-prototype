#include "absenc.h"
#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"
#include <memory>
#include <chrono>
/*Include autogenerated message header*/
#include "absenc_interface/msg/encoder_values.hpp"
    using namespace std::chrono_literals;
class AbsEnc : public rclcpp::Node
{
  public:
    AbsEnc()
    : Node("absenc_node")
    {
          /*
        Set default parameter for the filepath of the absenc. To set, use 
        ros2 run absenc_interface absenc_node --ros-args -p absenc_polling_rate:=1000
        or during runtime (when the node is already running) as 
        ros2 param set /absenc_node absenc_polling_rate 1000 
      */
      this->declare_parameter("absenc_path", "/dev/ttyUSB0");
      this->declare_parameter("absenc_polling_rate", 100);

      subscription = this->create_subscription<absenc_interface::msg::EncoderValues>(
      "absenc_values", 10, std::bind(&AbsEnc::encoderValuesTopicCallback, this, std::placeholders::_1));
      
      publisher = this->create_publisher<absenc_interface::msg::EncoderValues>("absenc_values", 10);
      
      timer = this->create_wall_timer(
      std::chrono::milliseconds(this->get_parameter("absenc_polling_rate").as_int()), 
      std::bind(&AbsEnc::absEncPollingCallback, this));

      /*
        Open serial to RS485 device
      */
      ABSENC_Error_t err = ABSENC::OpenPort(this->get_parameter("absenc_path").as_string().c_str(),B57600);
      if(err.error != 0){
        std::cout << "fuic you";
      }
    }

  private:
    
   void absEncPollingCallback()
  {
    auto message = absenc_interface::msg::EncoderValues();     

    ABSENC_Meas_t absenc_meas_1,absenc_meas_2,absenc_meas_3;

    ABSENC::PollSlave(1,&absenc_meas_1);
    ABSENC::PollSlave(2,&absenc_meas_2);
    ABSENC::PollSlave(3,&absenc_meas_3);
    
    message.angle_1 = absenc_meas_1.angval + 180.f;
    message.angle_2 = absenc_meas_2.angval;
    message.angle_3 = absenc_meas_3.angval - 180.f;
    
    //TODO : Can simplify this a bit. 
    publisher->publish(message);
  }

    void encoderValuesTopicCallback(const absenc_interface::msg::EncoderValues::SharedPtr msg) const
    {
  
      std::cout << "Angle 1 : "  << msg->angle_1 << std::endl;
      std::cout << "Angle 2 : "  << msg->angle_2 << std::endl;
      std::cout << "Angle 3 : "  << msg->angle_3 << std::endl;
    }
    rclcpp::TimerBase::SharedPtr timer;
    rclcpp::Subscription<absenc_interface::msg::EncoderValues>::SharedPtr subscription;
    rclcpp::Publisher<absenc_interface::msg::EncoderValues>::SharedPtr publisher;
};

int main(int argc, char * argv[])
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<AbsEnc>());
  rclcpp::shutdown();
  return 0;
}
